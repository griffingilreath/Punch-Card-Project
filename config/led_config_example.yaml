# LED and Hardware Configuration for Punch Card Project
# Copy this file to config.yaml and adjust settings as needed

# General display settings
display:
  led_delay: 0.05          # Delay between LED updates (seconds)
  message_delay: 5.0       # Delay between messages (seconds)
  random_delay: true       # Use random delays between messages
  random_delay_min: 5.0    # Minimum random delay (seconds)
  random_delay_max: 15.0   # Maximum random delay (seconds)

# Hardware settings
hardware:
  # Type of hardware to use:
  # - "none": No hardware output (terminal only)
  # - "simulated": Simulated hardware (prints to console)
  # - "rpi": Raspberry Pi GPIO
  type: "simulated"
  
  # Hardware-specific settings
  brightness: 0.5          # LED brightness (0.0 to 1.0)
  update_rate: 30          # Hardware update rate (Hz)
  invert: false            # Invert LED states (true = off, false = on)
  enabled: true            # Enable hardware output
  
  # Raspberry Pi GPIO pin configuration
  # This section is only used when type is "rpi"
  rpi:
    # Pin mapping for LED matrix
    # Format: [row, column] = GPIO pin number
    # This is an example - adjust to match your actual wiring
    pins:
      # Row 0 (12)
      - [0, 0, 2]    # Row 0, Column 0 = GPIO pin 2
      - [0, 1, 3]    # Row 0, Column 1 = GPIO pin 3
      
      # Row 1 (11)
      - [1, 0, 4]    # Row 1, Column 0 = GPIO pin 4
      - [1, 1, 5]    # Row 1, Column 1 = GPIO pin 5
      
    # Use shift registers to control multiple LEDs (recommended for large arrays)
    shift_registers:
      enabled: false
      data_pin: 17      # GPIO pin for data
      clock_pin: 27     # GPIO pin for clock
      latch_pin: 22     # GPIO pin for latch
      num_registers: 4  # Number of shift registers daisy-chained
    
    # Use LED matrix driver ICs (for more advanced setups)
    matrix_driver:
      enabled: false
      type: "MAX7219"   # Type of LED matrix driver
      cs_pin: 8         # GPIO pin for chip select (CS)
      num_devices: 4    # Number of MAX7219 devices daisy-chained

# Animation settings
animations:
  # Directory containing animation files
  directory: "animations"
  
  # Default splash screen animation
  splash_screen: "splash.json"
  
  # Default wave animation
  wave: "wave.json"
  
  # Enable custom animations
  custom_enabled: true
  
  # List of custom animations to load on startup
  custom:
    - "custom1.json"
    - "custom2.json"

# Test message settings
test_messages:
  enabled: true
  file: "test_messages.txt"
  default_messages:
    - "IBM PUNCH CARD SIMULATOR"
    - "SYSTEM READY"
    - "ALL SYSTEMS OPERATIONAL"

# Diagnostic settings
diagnostics:
  enabled: true
  include_ip: false  # Whether to include IP address information

# Connection settings for remote hardware
# Use this if your LEDs are controlled by a separate device (e.g., Raspberry Pi)
remote:
  enabled: false
  host: "192.168.1.100"  # IP address of the remote device
  port: 8888             # Port to connect to
  protocol: "mqtt"       # Protocol to use (mqtt, websocket, zmq)
  
  # MQTT-specific settings
  mqtt:
    topic: "punch_card/leds"
    client_id: "punch_card_controller"
    broker: "192.168.1.100"
    broker_port: 1883
    username: ""
    password: ""

# ===========================================================================
# INSTALLATION AND WIRING INSTRUCTIONS
# ===========================================================================
#
# Physical LED Setup Options:
#
# 1. Direct GPIO Connection (small number of LEDs):
#    - Connect LEDs directly to GPIO pins with appropriate resistors
#    - Set hardware.type = "rpi" and configure hardware.rpi.pins
#    - Good for testing with a small grid (e.g., 3x3)
#
# 2. Shift Register Method (medium-sized grids):
#    - Use shift registers (e.g., 74HC595) to control more LEDs with fewer pins
#    - Set hardware.type = "rpi" and configure hardware.rpi.shift_registers
#    - Good for grids up to 8x32
#
# 3. LED Matrix Drivers (large grids):
#    - Use LED matrix driver ICs like MAX7219
#    - Set hardware.type = "rpi" and configure hardware.rpi.matrix_driver
#    - Recommended for full 12x80 grid
#
# 4. Remote Controller:
#    - Run the display software on one computer and LED control on a Raspberry Pi
#    - Set remote.enabled = true and configure connection settings
#    - Allows separating the display logic from hardware control
#
# Wiring Example for MAX7219 8x8 LED Matrices (recommended approach):
#
# 1. Connect MAX7219 modules in cascade:
#    - Connect the first MAX7219 module to Raspberry Pi:
#        - VCC to 5V
#        - GND to GND
#        - DIN to GPIO pin specified in matrix_driver.data_pin
#        - CS to GPIO pin specified in matrix_driver.cs_pin
#        - CLK to GPIO pin specified in matrix_driver.clock_pin
#    - Connect subsequent modules:
#        - DOUT of previous module to DIN of next module
#        - Connect all CS pins together
#        - Connect all CLK pins together
#
# 2. Install the required libraries:
#    $ pip install luma.led_matrix
#
# 3. Set hardware.type = "rpi" and configure the matrix_driver section 